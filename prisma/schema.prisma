// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          Role          @default(USER)
  avatar        String?
  daysInARow    Int           @default(0) @map("days_in_a_row")
  refresh_token RefreshToken?

  points        Point[]
  tasks         Task[]
  comments      Comment[]
  ansers        Answer[]
  presences     Presence[]
  notifications Notification[]

  @@map("users")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn Int    @map("expires_in")
  userId    String @unique

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_token")
}

model Journey {
  id          String @id @default(uuid())
  title       String
  description String
  maxDay      Int    @map("max_day")

  createdAt DateTime @default(now()) @map("created_at")

  jorneyDays JourneyDay[]
}

model JourneyDay {
  id              String   @id @default(uuid())
  jorneyId        String   @map("journey_id")
  date            DateTime
  currentProgress Int      @default(0) @map("current_progress")

  presences Presence[]

  journey Journey @relation(fields: [jorneyId], references: [id])

  @@map("journey_day")
}

enum Icon {
  appointment
  calendar
  calendar2
  chat
  journey
  onlineMeeting
  order
  pendingTask
  taskList
  toDoList
}

model PointCategory {
  id    String @id @default(uuid())
  text  String @unique()
  value Int
  icon  Icon   @default(chat)

  points Point[]

  @@map("points_categories")
}

model Point {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  pointCategoryId String   @map("point_category_id")
  createdAt       DateTime @default(now()) @map("created_at")

  user          User          @relation(fields: [userId], references: [id])
  pointCategory PointCategory @relation(fields: [pointCategoryId], references: [id])
}

model Task {
  id       String @id @default(uuid())
  authorId String @map("author_id")

  title     String
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  users       User         @relation(fields: [authorId], references: [id])
  answers     Answer[]
  attachments Attachment[]
}

model Answer {
  id       String @id @default(uuid())
  taskId   String @map("task_id")
  authorId String @map("author_id")

  url       String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  task     Task      @relation(fields: [taskId], references: [id])
  user     User      @relation(fields: [authorId], references: [id])
  comments Comment[]
}

model Comment {
  id       String @id @default(uuid())
  answerId String @map("answer_id")
  authorId String @map("author_id")

  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  answer Answer @relation(fields: [answerId], references: [id])
  user   User   @relation(fields: [authorId], references: [id])
}

model Attachment {
  id     String @id @default(uuid())
  taskId String @map("task_id")
  path   String

  task Task @relation(fields: [taskId], references: [id])
}

model Presence {
  id           String   @id @default(uuid())
  userId       String
  journeyDayId String   @map("jorney_day_id")
  createdAt    DateTime @default(now()) @map("created_at")

  jorneyDay JourneyDay @relation(fields: [journeyDayId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Notification {
  id          String @id @default(uuid())
  recipientId String @map("recipient_id")

  title     String
  content   String
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}
